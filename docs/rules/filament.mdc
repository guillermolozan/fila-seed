---
alwaysApply: false
---
# Reglas y Mejores Prácticas para Filament v3

## 📋 Estructura del Proyecto

### Organización de Directorios
```
app/Filament/
├── Resources/          # Recursos principales del sistema
├── Pages/              # Páginas personalizadas
├── Clusters/           # Agrupaciones de recursos
├── Widgets/            # Widgets del dashboard
├── Traits/             # Traits reutilizables
├── Filters/            # Filtros personalizados
└── Components/         # Componentes reutilizables
```

## 🎯 Reglas Generales


## Convenciones
- Usar clases de utilidad de Tailwind 3 CSS
- Seguir metodología mobile-first para responsive design
- Considerar siempre modo dark y modo light
- Usar componentes Blade reutilizables
- Optimizar para performance con lazy loading
- Preferir Blade y Alpine.js para interactividad simple
- Usar Livewire para componentes más complejos que requieran estado


### 1. Nomenclatura y Convenciones
- **Recursos**: Usar nombres en inglés, en plural y PascalCase (ej: `UserResource`, `ClientResource`)
- **Modelos**: Nombres en inglés, en singular y PascalCase (ej: `User`, `Client`, `Service`)
- **Páginas**: Sufijo `Page` (ej: `DashboardPage`, `ReportsPage`)
- **Widgets**: Sufijo `Widget` (ej: `SalesStatsWidget`, `ClientActivityWidget`)

### 2. Estructura de Recursos
```php
class ClientResource extends Resource
{
    protected static ?string $model = Client::class;
    protected static ?string $navigationIcon = 'heroicon-o-users';
    protected static ?string $navigationGroup = 'Grupo';
    protected static ?int $navigationSort = 1;
    
    // Campos del formulario
    public static function form(Form $form): Form
    {
        return $form
            ->schema([
                // Campos organizados en secciones
            ])
            ->columns(2);
    }
    
    // Tabla de listado
    public static function table(Table $table): Table
    {
        return $table
            ->columns([
                // Columnas con ordenamiento y filtros
            ])
            ->filters([
                // Filtros aplicables
            ])
            ->actions([
                // Acciones por fila
            ])
            ->bulkActions([
                // Acciones masivas
            ]);
    }
}
```

## 🔐 Gestión de Permisos

### 1. Integración con Filament Shield
- Usar `bezhansalleh/filament-shield` para gestión de permisos
- Definir políticas de acceso por tipo de usuario
- Implementar filtros automáticos por jerarquía


## 🎨 UI/UX y Componentes

### 1. Componentes Reutilizables
- Crear componentes en `app/Filament/Components/`
- Usar traits para funcionalidad común
- Implementar modales para relaciones complejas

### 2. Formularios Inteligentes

- Agrupa los campos en secciones

```php
// Ejemplo de formulario con validación condicional
public static function form(Form $form): Form
{
    return $form
        ->schema([
            Section::make('Información Personal')
                ->schema([
                    TextInput::make('name')
                        ->required()
                        ->maxLength(255),
                    TextInput::make('email')
                        ->email()
                        ->required()
                        ->unique(ignoreRecord: true),
                    Select::make('contact_method')
                        ->options(ContactMethod::pluck('name', 'id'))
                        ->required(),
                ])
                ->columns(2),
                
            Section::make('Información de Venta')
                ->schema([
                    Select::make('product_type')
                        ->options(ProductType::pluck('name', 'id'))
                        ->reactive()
                        ->required(),
                    Select::make('product_block')
                        ->options(fn ($get) => 
                            ProductBlock::where('product_type_id', $get('product_type'))
                                ->pluck('name', 'id')
                        )
                        ->visible(fn ($get) => $get('product_type'))
                        ->required(),
                ])
                ->columns(2),
        ]);
}
```

## Tablas
- En las columnas de fechas, tener el siguiente formato 
  - "10 ago 24 10:20pm",
  - si es el mismo año mostrar "10 ago 10:20pm"
  - si es el mismo dia mostrar "hoy 10:20pm"
  - si es dia de ayer mostrar "ayer 10:20pm"



## 🔄 Relaciones y Managers

### 1. Relation Managers
- Usar `guava/filament-modal-relation-managers` para modales
- Implementar managers para actividades, cotizaciones, etc.
- Mantener consistencia en la navegación

### 2. Ejemplo de Relation Manager
```php
class ClientActivitiesRelationManager extends RelationManager
{
    protected static string $relationship = 'activities';
    protected static ?string $title = 'Actividades';
    
    public function form(Form $form): Form
    {
        return $form
            ->schema([
                TextInput::make('description')
                    ->required()
                    ->maxLength(255),
                Select::make('type')
                    ->options([
                        'call' => 'Llamada',
                        'email' => 'Email',
                        'meeting' => 'Reunión',
                        'follow_up' => 'Seguimiento',
                    ])
                    ->required(),
                DateTimePicker::make('scheduled_at')
                    ->required(),
            ]);
    }
}
```

## 📱 Responsive Design

### 1. Adaptación Móvil
- Usar `columns()` en formularios para layouts responsivos
- Implementar `responsiveTable()` en tablas
- Optimizar widgets para dispositivos móviles

### 2. Ejemplo de Layout Responsivo
```php
public static function form(Form $form): Form
{
    return $form
        ->schema([
            // Campos organizados en columnas responsivas
        ])
        ->columns([
            'default' => 1,      // Móvil: 1 columna
            'sm' => 2,           // Tablet: 2 columnas
            'lg' => 3,           // Desktop: 3 columnas
        ]);
}
```

## 🚀 Optimización y Performance

### 1. Consultas Eficientes
- Usar `with()` para cargar relaciones
- Implementar paginación en tablas grandes
- Usar índices en base de datos para campos de búsqueda

### 2. Caché y Memoria
- Implementar caché para widgets costosos
- Usar `remember()` para consultas frecuentes
- Optimizar consultas de dashboard

## 🔧 Configuración y Personalización

### 1. Temas y Branding
- Personalizar colores en `config/filament.php`
- Usar logos y favicons personalizados
- Implementar temas oscuro/claro

### 2. Configuración del Panel
```php
// config/filament.php
'panels' => [
    'default' => [
        'id' => 'admin',
        'path' => 'admin',
        'login' => \App\Filament\Pages\Auth\Login::class,
        'colors' => [
            'primary' => Color::Amber,
        ],
        'brandName' => 'Proyecto',
        'favicon' => asset('images/favicon.ico'),
    ],
],
```

## 📝 Documentación y Mantenimiento

### 1. Comentarios en Código
- Documentar recursos complejos
- Explicar lógica de negocio
- Mantener ejemplos de uso

## 🚨 Consideraciones de Seguridad

### 1. Validación de Datos
- Implementar reglas de validación estrictas
- Sanitizar inputs del usuario
- Validar permisos en cada acción

### 2. Auditoría
- Registrar cambios importantes
- Mantener logs de acceso y modificaciones

## 📚 Recursos Adicionales

### 1. Paquetes Utilizados
- `filament/filament`: Panel administrativo principal
- `bezhansalleh/filament-shield`: Gestión de permisos
- `amidesfahani/filament-tinyeditor`: Editor de texto rico
- `guava/filament-modal-relation-managers`: Modales para relaciones

### 2. Enlaces Útiles
- [Documentación oficial de Filament](https://filamentphp.com/docs)
- [Filament Shield](https://github.com/bezhansalleh/filament-shield)
- [Filament Components](https://filamentphp.com/docs/3.x/panels/resources/relation-managers)

---

## Filament UI
- Extender estilos de Filament usando CSS personalizado
- Crear componentes Blade personalizados para formularios complejos
- Usar el sistema de temas de Filament
- Implementar layouts personalizados cuando sea necesario
- Aprovechar Alpine.js integrado en Filament para interactividad




**Nota**: Este documento debe actualizarse conforme evolucione el proyecto y se implementen nuevas funcionalidades.
